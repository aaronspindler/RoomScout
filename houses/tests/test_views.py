from django.contrib.auth import get_user_model
from django.test import TestCase, Client
from django.urls import reverse

from bills.models import BillSet, Bill
from garbageday.models import GarbageDay
from houses.models import House, Invitation
from rooms.models import Room


class HousesViewsTests(TestCase):
    def setUp(self):
        self.client = Client()
        User = get_user_model()
        self.user = User.objects.create_user(username='FredFlintstone', email='aaron@xnovax.net', password='babadoo')
        self.user2 = User.objects.create_user(username='JackyFlintstone', email='jacky@flintstone.com', password='lovefred')
        house = House.objects.create(user=self.user)
        house.place_id = 'EiwyNTI5IFN0YWxsaW9uIERyLCBPc2hhd2EsIE9OIEwxSCA3SzQsIENhbmFkYSIxEi8KFAoSCY_JD3vDG9WJEe3JFhlBvwOKEOETKhQKEgnrS9FlwxvViRHYx20MM9m-8g'
        house.lat = '43.95858010000001'
        house.lon = '-78.91587470000002'
        house.street_number = 2529
        house.street_name = 'Stallion Drive'
        house.city = 'Oshawa'
        house.prov_state = 'ON'
        house.postal_code = 'L1H 0M4'
        house.country = 'Canada'

        house.save()
        self.house = house

    def test_house_create_view_get(self):
        print('Testing houses.views.house_create() GET')
        self.client.force_login(self.user)
        response = self.client.get(reverse('house_create'))
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'houses/house_create.html')
        self.assertContains(response, 'Create a House')
        self.assertContains(response, 'Address')
        self.assertContains(response, 'Garbage Day')
        self.assertNotContains(response, 'Login')

    def test_house_create_view_get_not_logged_in(self):
        print('Testing houses.views.house_create() GET not logged in')
        self.client.logout()
        response = self.client.get(reverse('house_create'), follow=True)
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'account/login.html')
        self.assertNotContains(response, 'Create a House')
        self.assertNotContains(response, 'Address')
        self.assertNotContains(response, 'Garbage Day')
        self.assertNotContains(response, '404')
        self.assertContains(response, 'Login')

    def test_house_create_view_post(self):
        print('Testing houses.views.house_create() POST')
        house_count_pre = House.objects.count()
        billset_count_pre = BillSet.objects.count()
        garbageday_count_pre = GarbageDay.objects.count()
        self.client.force_login(self.user)
        req_data = {'street_number': '2529', 'street_name': 'Stallion Drive', 'city': 'Oshawa', 'prov_state': 'ON', 'postal_code': 'L1L 0M4', 'country': 'Canada', 'place_id': 'ChIJ94z9ZcMb1YkRsQk9b683-go', 'lat': '43.95855359999999', 'lon': '-78.91573879999999', 'LastGarbageDay': '2019-12-11',
                    'NextGarbageDay': '2019-12-25'}
        response = self.client.post(reverse('house_create'), req_data, follow=True)
        house_count_post = House.objects.count()
        billset_count_post = BillSet.objects.count()
        garbageday_count_post = GarbageDay.objects.count()
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'houses/house_detail.html')
        self.assertNotContains(response, 'Create a House')
        self.assertContains(response, 'Garbage Day')
        self.assertNotContains(response, '404')
        self.assertNotContains(response, 'Login')
        self.assertGreater(house_count_post, house_count_pre)
        self.assertGreater(billset_count_post, billset_count_pre)
        self.assertGreater(garbageday_count_post, garbageday_count_pre)

    def test_house_create_view_post_blank_garbageday(self):
        print('Testing houses.views.house_create() POST blank garbageday')
        house_count_pre = House.objects.count()
        billset_count_pre = BillSet.objects.count()
        garbageday_count_pre = GarbageDay.objects.count()
        self.client.force_login(self.user)
        req_data = {'street_number': '2529', 'street_name': 'Stallion Drive', 'city': 'Oshawa', 'prov_state': 'ON', 'postal_code': 'L1L 0M4', 'country': 'Canada', 'place_id': 'ChIJ94z9ZcMb1YkRsQk9b683-go', 'lat': '43.95855359999999', 'lon': '-78.91573879999999', 'LastGarbageDay': '',
                    'NextGarbageDay': ''}
        response = self.client.post(reverse('house_create'), req_data, follow=True)
        house_count_post = House.objects.count()
        billset_count_post = BillSet.objects.count()
        garbageday_count_post = GarbageDay.objects.count()
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'houses/house_detail.html')
        self.assertNotContains(response, 'Create a House')
        self.assertContains(response, 'Garbage Day')
        self.assertNotContains(response, '404')
        self.assertNotContains(response, 'Login')
        self.assertGreater(house_count_post, house_count_pre)
        self.assertGreater(billset_count_post, billset_count_pre)
        self.assertEqual(garbageday_count_post, garbageday_count_pre)

    def test_house_create_view_post_no_garbage_day(self):
        print('Testing houses.views.house_create() POST no garbage day')
        house_count_pre = House.objects.count()
        billset_count_pre = BillSet.objects.count()
        garbageday_count_pre = GarbageDay.objects.count()
        self.client.force_login(self.user)
        req_data = {'street_number': '2529', 'street_name': 'Stallion Drive', 'city': 'Oshawa', 'prov_state': 'ON', 'postal_code': 'L1L 0M4', 'country': 'Canada', 'place_id': 'ChIJ94z9ZcMb1YkRsQk9b683-go', 'lat': '43.95855359999999', 'lon': '-78.91573879999999'}
        response = self.client.post(reverse('house_create'), req_data, follow=True)
        house_count_post = House.objects.count()
        billset_count_post = BillSet.objects.count()
        garbageday_count_post = GarbageDay.objects.count()
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'houses/house_detail.html')
        self.assertNotContains(response, 'Create a House')
        self.assertContains(response, 'Garbage Day')
        self.assertNotContains(response, '404')
        self.assertNotContains(response, 'Login')
        self.assertGreater(house_count_post, house_count_pre)
        self.assertGreater(billset_count_post, billset_count_pre)
        self.assertEqual(garbageday_count_post, garbageday_count_pre)

    def test_house_create_view_post_invalid(self):
        print('Testing houses.views.house_create() POST invalid')
        house_count_pre = House.objects.count()
        billset_count_pre = BillSet.objects.count()
        garbageday_count_pre = GarbageDay.objects.count()
        self.client.force_login(self.user)
        req_data = {}
        response = self.client.post(reverse('house_create'), req_data, follow=True)
        house_count_post = House.objects.count()
        billset_count_post = BillSet.objects.count()
        garbageday_count_post = GarbageDay.objects.count()
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'houses/house_create.html')
        self.assertContains(response, 'Create a House')
        self.assertContains(response, 'Garbage Day')
        self.assertContains(response, 'There is an issue with the address inputted!')
        self.assertNotContains(response, 'Bills')
        self.assertNotContains(response, 'Login')
        self.assertEqual(house_count_post, house_count_pre)
        self.assertEqual(billset_count_post, billset_count_pre)
        self.assertEqual(garbageday_count_post, garbageday_count_pre)

    def test_house_create_view_post_invalid_1(self):
        print('Testing houses.views.house_create() POST invalid 1')
        house_count_pre = House.objects.count()
        billset_count_pre = BillSet.objects.count()
        garbageday_count_pre = GarbageDay.objects.count()
        self.client.force_login(self.user)
        req_data = {'street_name': 'Stallion Drive', 'city': 'Oshawa', 'prov_state': 'ON', 'postal_code': 'L1L 0M4', 'country': 'Canada', 'place_id': 'ChIJ94z9ZcMb1YkRsQk9b683-go', 'lat': '43.95855359999999', 'lon': '-78.91573879999999'}
        response = self.client.post(reverse('house_create'), req_data, follow=True)
        house_count_post = House.objects.count()
        billset_count_post = BillSet.objects.count()
        garbageday_count_post = GarbageDay.objects.count()
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'houses/house_create.html')
        self.assertContains(response, 'Create a House')
        self.assertContains(response, 'Garbage Day')
        self.assertContains(response, 'There is an issue with the address inputted!')
        self.assertNotContains(response, 'Bills')
        self.assertNotContains(response, 'Login')
        self.assertEqual(house_count_post, house_count_pre)
        self.assertEqual(billset_count_post, billset_count_pre)
        self.assertEqual(garbageday_count_post, garbageday_count_pre)

    def test_house_create_view_post_invalid_2(self):
        print('Testing houses.views.house_create() POST invalid 2')
        house_count_pre = House.objects.count()
        billset_count_pre = BillSet.objects.count()
        garbageday_count_pre = GarbageDay.objects.count()
        self.client.force_login(self.user)
        req_data = {'city': 'Oshawa', 'prov_state': 'ON', 'postal_code': 'L1L 0M4', 'country': 'Canada', 'place_id': 'ChIJ94z9ZcMb1YkRsQk9b683-go', 'lat': '43.95855359999999', 'lon': '-78.91573879999999'}
        response = self.client.post(reverse('house_create'), req_data, follow=True)
        house_count_post = House.objects.count()
        billset_count_post = BillSet.objects.count()
        garbageday_count_post = GarbageDay.objects.count()
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'houses/house_create.html')
        self.assertContains(response, 'Create a House')
        self.assertContains(response, 'Garbage Day')
        self.assertContains(response, 'There is an issue with the address inputted!')
        self.assertNotContains(response, 'Bills')
        self.assertNotContains(response, '404')
        self.assertNotContains(response, 'Login')
        self.assertEqual(house_count_post, house_count_pre)
        self.assertEqual(billset_count_post, billset_count_pre)
        self.assertEqual(garbageday_count_post, garbageday_count_pre)

    def test_house_create_view_post_not_logged_in(self):
        print('Testing houses.views.house_create() POST not logged in')
        self.client.logout()
        req_data = {}
        house_pre_count = House.objects.count()
        response = self.client.post(reverse('house_create'), req_data, follow=True)
        house_post_count = House.objects.count()
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'account/login.html')
        self.assertNotContains(response, 'Create a House')
        self.assertNotContains(response, 'Address')
        self.assertNotContains(response, 'Garbage Day')
        self.assertNotContains(response, '404')
        self.assertContains(response, 'Login')
        self.assertEqual(house_pre_count, house_post_count)

    def test_house_bill_add_view_get(self):
        print('Testing houses.views.house_bill_add() GET')
        self.client.force_login(self.user)
        bill_count_pre = Bill.objects.count()
        billset_count_pre = BillSet.objects.count()
        response = self.client.get(reverse('house_bill_add', kwargs={'pk': self.house.pk}), follow=True)
        bill_count_post = Bill.objects.count()
        billset_count_post = BillSet.objects.count()
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'houses/house_bill_add.html')
        self.assertContains(response, 'Add bill to')
        self.assertNotContains(response, 'Garbage Day')
        self.assertNotContains(response, '404')
        self.assertNotContains(response, 'Login')
        self.assertEqual(bill_count_pre, bill_count_post)
        self.assertEqual(billset_count_pre, billset_count_post)

    def test_house_bill_add_view_get_not_logged_in(self):
        print('Testing houses.views.house_bill_add() GET not logged in')
        self.client.logout()
        bill_count_pre = Bill.objects.count()
        billset_count_pre = BillSet.objects.count()
        response = self.client.get(reverse('house_bill_add', kwargs={'pk': self.house.pk}), follow=True)
        bill_count_post = Bill.objects.count()
        billset_count_post = BillSet.objects.count()
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'account/login.html')
        self.assertNotContains(response, 'Add bill to')
        self.assertNotContains(response, 'Garbage Day')
        self.assertNotContains(response, '404')
        self.assertContains(response, 'Login')
        self.assertEqual(bill_count_pre, bill_count_post)
        self.assertEqual(billset_count_pre, billset_count_post)

    def test_house_bill_add_view_get_wrong_user(self):
        print('Testing houses.views.house_bill_add() GET wrong user')
        self.client.force_login(self.user2)
        bill_count_pre = Bill.objects.count()
        billset_count_pre = BillSet.objects.count()
        response = self.client.get(reverse('house_bill_add', kwargs={'pk': self.house.pk}), follow=True)
        bill_count_post = Bill.objects.count()
        billset_count_post = BillSet.objects.count()
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'main/404.html')
        self.assertNotContains(response, 'Add bill to')
        self.assertNotContains(response, 'Garbage Day')
        self.assertContains(response, '404')
        self.assertNotContains(response, 'Login')
        self.assertEqual(bill_count_pre, bill_count_post)
        self.assertEqual(billset_count_pre, billset_count_post)

    def test_house_bill_add_view_post(self):
        print('Testing houses.views.house_bill_add() POST')
        self.client.force_login(self.user)
        bill_count_pre = Bill.objects.count()
        billset_count_pre = BillSet.objects.count()
        req_data = {'form-0-type': 'GAS', 'form-0-date': '2019-12-11', 'form-0-amount': '298.99', 'form-TOTAL_FORMS': 1, 'form-INITIAL_FORMS': 0}
        response = self.client.post(reverse('house_bill_add', kwargs={'pk': self.house.pk}), req_data, follow=True)
        bill_count_post = Bill.objects.count()
        billset_count_post = BillSet.objects.count()
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'houses/house_detail.html')
        self.assertNotContains(response, 'You have entered invalid bill data')
        self.assertNotContains(response, 'You have enter the date in an incorrect format! Use yyyy-mm-dd')
        self.assertContains(response, self.house)
        self.assertNotContains(response, 'Add bill to')
        self.assertContains(response, 'Garbage Day')
        self.assertNotContains(response, '404')
        self.assertNotContains(response, 'Login')
        self.assertGreater(bill_count_post, bill_count_pre)
        self.assertGreater(billset_count_post, billset_count_pre)

    def test_house_bill_add_view_post_not_logged_in(self):
        print('Testing houses.views.house_bill_add() POST not logged in')
        self.client.logout()
        bill_count_pre = Bill.objects.count()
        billset_count_pre = BillSet.objects.count()
        req_data = {'form-0-type': 'GAS', 'form-0-date': '2019-12-11', 'form-0-amount': '298.99', 'form-TOTAL_FORMS': 1, 'form-INITIAL_FORMS': 0}
        response = self.client.post(reverse('house_bill_add', kwargs={'pk': self.house.pk}), req_data, follow=True)
        bill_count_post = Bill.objects.count()
        billset_count_post = BillSet.objects.count()
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'account/login.html')
        self.assertNotContains(response, self.house)
        self.assertNotContains(response, 'Add bill to')
        self.assertNotContains(response, 'Garbage Day')
        self.assertNotContains(response, '404')
        self.assertContains(response, 'Login')
        self.assertEqual(bill_count_post, bill_count_pre)
        self.assertEqual(billset_count_post, billset_count_pre)

    def test_house_bill_add_view_post_wrong_user(self):
        print('Testing houses.views.house_bill_add() POST wrong user')
        self.client.force_login(self.user2)
        bill_count_pre = Bill.objects.count()
        billset_count_pre = BillSet.objects.count()
        req_data = {'form-0-type': 'GAS', 'form-0-date': '2019-12-11', 'form-0-amount': '298.99', 'form-TOTAL_FORMS': 1, 'form-INITIAL_FORMS': 0}
        response = self.client.post(reverse('house_bill_add', kwargs={'pk': self.house.pk}), req_data, follow=True)
        bill_count_post = Bill.objects.count()
        billset_count_post = BillSet.objects.count()
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'main/404.html')
        self.assertNotContains(response, self.house)
        self.assertNotContains(response, 'Add bill to')
        self.assertNotContains(response, 'Garbage Day')
        self.assertContains(response, '404')
        self.assertNotContains(response, 'Login')
        self.assertEqual(bill_count_post, bill_count_pre)
        self.assertEqual(billset_count_post, billset_count_pre)

    def test_house_bill_add_view_post_invalid(self):
        print('Testing houses.views.house_bill_add() POST invalid')
        self.client.force_login(self.user)
        bill_count_pre = Bill.objects.count()
        billset_count_pre = BillSet.objects.count()
        req_data = {'form-0-date': '2019-12-11', 'form-0-amount': '298.99', 'form-TOTAL_FORMS': 1, 'form-INITIAL_FORMS': 0}

        response = self.client.post(reverse('house_bill_add', kwargs={'pk': self.house.pk}), req_data, follow=True)
        bill_count_post = Bill.objects.count()
        billset_count_post = BillSet.objects.count()
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'houses/house_bill_add.html')
        self.assertContains(response, self.house)
        self.assertContains(response, 'Add bill to')
        self.assertNotContains(response, 'Garbage Day')
        self.assertNotContains(response, '404')
        self.assertNotContains(response, 'Login')
        self.assertEqual(bill_count_post, bill_count_pre)
        self.assertEqual(billset_count_post, billset_count_pre)

    def test_house_bill_add_view_post_invalid1(self):
        print('Testing houses.views.house_bill_add() POST invalid 1')
        self.client.force_login(self.user)
        bill_count_pre = Bill.objects.count()
        billset_count_pre = BillSet.objects.count()
        req_data = {'form-0-type': 'GAS', 'form-0-amount': '298.99', 'form-TOTAL_FORMS': 1, 'form-INITIAL_FORMS': 0}

        response = self.client.post(reverse('house_bill_add', kwargs={'pk': self.house.pk}), req_data, follow=True)
        bill_count_post = Bill.objects.count()
        billset_count_post = BillSet.objects.count()
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'houses/house_bill_add.html')
        self.assertContains(response, self.house)
        self.assertContains(response, 'Add bill to')
        self.assertNotContains(response, 'Garbage Day')
        self.assertNotContains(response, '404')
        self.assertNotContains(response, 'Login')
        self.assertEqual(bill_count_post, bill_count_pre)
        self.assertEqual(billset_count_post, billset_count_pre)

    def test_house_bill_add_view_post_invalid2(self):
        print('Testing houses.views.house_bill_add() POST invalid 2')
        self.client.force_login(self.user)
        bill_count_pre = Bill.objects.count()
        billset_count_pre = BillSet.objects.count()
        req_data = {'form-0-type': 'GAS', 'form-0-date': '2019-12-11', 'form-TOTAL_FORMS': 1, 'form-INITIAL_FORMS': 0}
        response = self.client.post(reverse('house_bill_add', kwargs={'pk': self.house.pk}), req_data, follow=True)
        bill_count_post = Bill.objects.count()
        billset_count_post = BillSet.objects.count()
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'houses/house_bill_add.html')
        self.assertContains(response, self.house)
        self.assertContains(response, 'Add bill to')
        self.assertNotContains(response, 'Garbage Day')
        self.assertNotContains(response, '404')
        self.assertNotContains(response, 'Login')
        self.assertEqual(bill_count_post, bill_count_pre)
        self.assertEqual(billset_count_post, billset_count_pre)

    def test_house_bill_add_view_post_bad_date(self):
        print('Testing houses.views.house_bill_add() POST bad date')
        self.client.force_login(self.user)
        bill_count_pre = Bill.objects.count()
        billset_count_pre = BillSet.objects.count()

        req_data = {'form-0-type': 'GAS', 'form-0-date': '12-11-2019', 'form-0-amount': '298.99', 'form-TOTAL_FORMS': 1, 'form-INITIAL_FORMS': 0}
        response = self.client.post(reverse('house_bill_add', kwargs={'pk': self.house.pk}), req_data, follow=True)
        bill_count_post = Bill.objects.count()
        billset_count_post = BillSet.objects.count()
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'houses/house_bill_add.html')
        self.assertContains(response, self.house)
        self.assertContains(response, 'Add bill to')
        self.assertContains(response, 'You have entered invalid bill data')
        self.assertNotContains(response, 'Garbage Day')
        self.assertNotContains(response, '404')
        self.assertNotContains(response, 'Login')
        self.assertEqual(bill_count_post, bill_count_pre)
        self.assertEqual(billset_count_post, billset_count_pre)

    def test_house_invite_view_get(self):
        print('Testing houses.views.house_invite() GET')
        self.client.force_login(self.user)
        response = self.client.get(reverse('house_invite', args=[self.house.id]))
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'houses/house_invite.html')
        self.assertContains(response, self.house)
        self.assertContains(response, 'Invite')
        self.assertNotContains(response, 'Login')

    def test_house_invite_view_get_not_logged_in(self):
        print('Testing houses.views.house_invite() GET not logged in')
        self.client.logout()
        response = self.client.get(reverse('house_invite', args=[self.house.id]), follow=True)
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'account/login.html')
        self.assertNotContains(response, 'Invite')
        self.assertNotContains(response, '404')
        self.assertContains(response, 'Login')

    def test_house_invite_view_get_wrong_user(self):
        print('Testing houses.views.house_invite() GET wrong user')
        self.client.force_login(self.user2)
        response = self.client.get(reverse('house_invite', args=[self.house.id]), follow=True)
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'main/404.html')
        self.assertNotContains(response, 'Invite')
        self.assertContains(response, '404')
        self.assertNotContains(response, 'Login')

    def test_house_invite_view_post(self):
        print('Testing houses.views.house_invite() POST')
        self.client.force_login(self.user)
        pre_count = Invitation.objects.count()
        req_data = {'email': 'aaron@xnovax.net'}
        response = self.client.post(reverse('house_invite', args=[self.house.id]), req_data, follow=True)
        post_count = Invitation.objects.count()
        self.assertEqual(pre_count + 1, post_count)
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'houses/house_detail.html')

    def test_house_invite_view_post_not_logged_in(self):
        print('Testing houses.views.house_invite() POST not logged in')
        self.client.logout()
        pre_count = Invitation.objects.count()
        req_data = {'email': 'aaron@xnovax.net'}
        response = self.client.post(reverse('house_invite', args=[self.house.id]), req_data, follow=True)
        post_count = Invitation.objects.count()
        self.assertEqual(pre_count, post_count)
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'account/login.html')
        self.assertContains(response, 'Login')
        self.assertNotContains(response, self.house)

    def test_house_invite_view_post_wrong_user(self):
        print('Testing houses.views.house_invite() POST wrong user')
        self.client.force_login(self.user2)
        pre_count = Invitation.objects.count()
        req_data = {'email': 'aaron@xnovax.net'}
        response = self.client.post(reverse('house_invite', args=[self.house.id]), req_data, follow=True)
        post_count = Invitation.objects.count()
        self.assertEqual(pre_count, post_count)
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'main/404.html')
        self.assertContains(response, '404')
        self.assertNotContains(response, 'Login')
        self.assertNotContains(response, self.house)

    def test_house_invite_view_post_no_email(self):
        print('Testing houses.views.house_invite() POST not email')
        self.client.force_login(self.user)
        pre_count = Invitation.objects.count()
        req_data = {}
        response = self.client.post(reverse('house_invite', args=[self.house.id]), req_data)
        post_count = Invitation.objects.count()
        self.assertEqual(pre_count, post_count)
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'houses/house_invite.html')
        self.assertContains(response, 'Please enter a valid email address')

    def test_house_invite_remove_view_get(self):
        print('Testing houses.views.house_invite_remove() GET')
        # Create an invite
        self.invite = Invitation.objects.create(house=self.house, sender=self.user, target='aaron@xnovax.net')
        self.client.force_login(self.user)
        pre_count = Invitation.objects.count()
        self.assertGreater(pre_count, 0)
        response = self.client.get(reverse('house_invite_remove', kwargs={'pk': self.house.id, 'id': self.invite.id}, ), follow=True)
        post_count = Invitation.objects.count()
        self.assertEqual(pre_count, post_count)
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'houses/house_detail.html')

    def test_house_invite_remove_view_get_not_logged_in(self):
        print('Testing houses.views.house_invite_remove() GET not logged in')
        self.invite = Invitation.objects.create(house=self.house, sender=self.user, target='aaron@xnovax.net')
        self.client.logout()
        response = self.client.get(reverse('house_invite_remove', kwargs={'pk': self.house.id, 'id': self.invite.id}, ), follow=True)
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'account/login.html')
        self.assertNotContains(response, 'Invite')
        self.assertNotContains(response, '404')
        self.assertContains(response, 'Login')

    def test_house_invite_remove_view_get_wrong_user(self):
        print('Testing houses.views.house_invite_remove() GET wrong user')
        self.invite = Invitation.objects.create(house=self.house, sender=self.user, target='aaron@xnovax.net')
        self.client.force_login(self.user2)
        response = self.client.get(reverse('house_invite_remove', kwargs={'pk': self.house.id, 'id': self.invite.id}, ), follow=True)
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'main/404.html')
        self.assertNotContains(response, 'Invite')
        self.assertContains(response, '404')
        self.assertNotContains(response, 'Login')

    def test_house_invite_remove_view_post(self):
        print('Testing houses.views.house_invite_remove() POST')
        # Create an invite
        self.invite = Invitation.objects.create(house=self.house, sender=self.user, target='aaron@xnovax.net')
        self.client.force_login(self.user)
        pre_count = Invitation.objects.count()
        self.assertGreater(pre_count, 0)
        response = self.client.post(reverse('house_invite_remove', kwargs={'pk': self.house.id, 'id': self.invite.id}, ), follow=True)
        post_count = Invitation.objects.count()
        self.assertEqual(pre_count - 1, post_count)
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'houses/house_detail.html')

    def test_house_invite_remove_view_post_not_logged_in(self):
        print('Testing houses.views.house_invite_remove() POST not logged in')
        # Create an invite
        self.invite = Invitation.objects.create(house=self.house, sender=self.user, target='aaron@xnovax.net')
        self.client.logout()
        pre_count = Invitation.objects.count()
        self.assertGreater(pre_count, 0)
        response = self.client.post(reverse('house_invite_remove', kwargs={'pk': self.house.id, 'id': self.invite.id}, ), follow=True)
        post_count = Invitation.objects.count()
        self.assertEqual(pre_count, post_count)
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'account/login.html')
        self.assertContains(response, 'Login')
        self.assertNotContains(response, '404')
        self.assertNotContains(response, self.house)

    def test_house_invite_remove_view_post_wrong_user(self):
        print('Testing houses.views.house_invite_remove() POST wrong user')
        # Create an invite
        self.invite = Invitation.objects.create(house=self.house, sender=self.user, target='aaron@xnovax.net')
        self.client.force_login(self.user2)
        pre_count = Invitation.objects.count()
        self.assertGreater(pre_count, 0)
        response = self.client.post(reverse('house_invite_remove', kwargs={'pk': self.house.id, 'id': self.invite.id}, ), follow=True)
        post_count = Invitation.objects.count()
        self.assertEqual(pre_count, post_count)
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'main/404.html')
        self.assertNotContains(response, 'Login')
        self.assertContains(response, '404')
        self.assertNotContains(response, self.house)

    def test_house_invite_accept_view_get(self):
        print('Testing houses.views.house_invite_accept() GET')
        self.invite = Invitation.objects.create(house=self.house, sender=self.user, target='aaron@xnovax.net')
        self.client.force_login(self.user)
        house_member_count_pre = self.house.members.count()
        invite_count_pre = Invitation.objects.count()
        response = self.client.get(reverse('house_invite_accept', kwargs={'pk': self.house.id, 'id': self.invite.id}, ), follow=True)
        house_member_count_post = self.house.members.count()
        invite_count_post = Invitation.objects.count()
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'houses/house_detail.html')
        self.assertContains(response, self.house)
        self.assertNotContains(response, 'Login')
        self.assertNotContains(response, '404')
        self.assertEqual(house_member_count_pre, house_member_count_post)
        self.assertEqual(invite_count_pre, invite_count_post)

    def test_house_invite_accept_view_get_not_logged_in(self):
        print('Testing houses.views.house_invite_accept() GET not logged in')
        self.invite = Invitation.objects.create(house=self.house, sender=self.user, target='aaron@xnovax.net')
        self.client.logout()
        house_member_count_pre = self.house.members.count()
        invite_count_pre = Invitation.objects.count()
        response = self.client.get(reverse('house_invite_accept', kwargs={'pk': self.house.id, 'id': self.invite.id}, ), follow=True)
        house_member_count_post = self.house.members.count()
        invite_count_post = Invitation.objects.count()
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'account/login.html')
        self.assertContains(response, 'Login')
        self.assertNotContains(response, '404')
        self.assertNotContains(response, self.house)
        self.assertEqual(house_member_count_pre, house_member_count_post)
        self.assertEqual(invite_count_pre, invite_count_post)

    def test_house_invite_accept_view_get_wrong_user(self):
        print('Testing houses.views.house_invite_accept() GET wrong user')
        self.invite = Invitation.objects.create(house=self.house, sender=self.user, target='aaron@xnovax.net')
        self.client.force_login(self.user2)
        house_member_count_pre = self.house.members.count()
        invite_count_pre = Invitation.objects.count()
        response = self.client.get(reverse('house_invite_accept', kwargs={'pk': self.house.id, 'id': self.invite.id}, ), follow=True)
        house_member_count_post = self.house.members.count()
        invite_count_post = Invitation.objects.count()
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'main/404.html')
        self.assertNotContains(response, 'Login')
        self.assertContains(response, '404')
        self.assertNotContains(response, self.house)
        self.assertEqual(house_member_count_pre, house_member_count_post)
        self.assertEqual(invite_count_pre, invite_count_post)

    def test_house_invite_accept_view_post(self):
        print('Testing houses.views.house_invite_accept() POST')
        self.invite = Invitation.objects.create(house=self.house, sender=self.user, target='aaron@xnovax.net')
        self.client.force_login(self.user)
        house_member_count_pre = self.house.members.count()
        invite_count_pre = Invitation.objects.count()
        response = self.client.post(reverse('house_invite_accept', kwargs={'pk': self.house.id, 'id': self.invite.id}, ), follow=True)
        house_member_count_post = self.house.members.count()
        invite_count_post = Invitation.objects.count()
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'houses/house_detail.html')
        self.assertNotContains(response, 'Login')
        self.assertNotContains(response, '404')
        self.assertContains(response, self.house)
        self.assertEqual(house_member_count_pre + 1, house_member_count_post)
        self.assertEqual(invite_count_pre - 1, invite_count_post)

    def test_house_invite_accept_view_post_not_logged_in(self):
        print('Testing houses.views.house_invite_accept() POST not logged in')
        self.invite = Invitation.objects.create(house=self.house, sender=self.user, target='aaron@xnovax.net')
        self.client.logout()
        house_member_count_pre = self.house.members.count()
        invite_count_pre = Invitation.objects.count()
        response = self.client.post(reverse('house_invite_accept', kwargs={'pk': self.house.id, 'id': self.invite.id}, ), follow=True)
        house_member_count_post = self.house.members.count()
        invite_count_post = Invitation.objects.count()
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'account/login.html')
        self.assertContains(response, 'Login')
        self.assertNotContains(response, '404')
        self.assertNotContains(response, self.house)
        self.assertEqual(house_member_count_pre, house_member_count_post)
        self.assertEqual(invite_count_pre, invite_count_post)

    def test_house_invite_accept_view_post_wrong_user(self):
        print('Testing houses.views.house_invite_accept() POST wrong user')
        self.invite = Invitation.objects.create(house=self.house, sender=self.user, target='aaron@xnovax.net')
        self.client.force_login(self.user2)
        house_member_count_pre = self.house.members.count()
        invite_count_pre = Invitation.objects.count()
        response = self.client.post(reverse('house_invite_accept', kwargs={'pk': self.house.id, 'id': self.invite.id}, ), follow=True)
        house_member_count_post = self.house.members.count()
        invite_count_post = Invitation.objects.count()
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'main/404.html')
        self.assertNotContains(response, 'Login')
        self.assertContains(response, '404')
        self.assertNotContains(response, self.house)
        self.assertEqual(house_member_count_pre, house_member_count_post)
        self.assertEqual(invite_count_pre, invite_count_post)

    def test_house_invite_decline_view_get(self):
        print('Testing houses.views.house_invite_decline() GET')
        self.invite = Invitation.objects.create(house=self.house, sender=self.user, target='aaron@xnovax.net')
        self.client.force_login(self.user)
        invite_count_pre = Invitation.objects.count()
        response = self.client.get(reverse('house_invite_decline', kwargs={'pk': self.house.id, 'id': self.invite.id}, ), follow=True)
        invite_count_post = Invitation.objects.count()
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'dashboard/main_dashboard.html')
        self.assertContains(response, self.house)
        self.assertNotContains(response, 'Login')
        self.assertNotContains(response, '404')
        self.assertEqual(invite_count_pre, invite_count_post)

    def test_house_invite_decline_view_get_not_logged_in(self):
        print('Testing houses.views.house_invite_decline() GET not logged in')
        self.invite = Invitation.objects.create(house=self.house, sender=self.user, target='aaron@xnovax.net')
        self.client.logout()
        invite_count_pre = Invitation.objects.count()
        response = self.client.get(reverse('house_invite_decline', kwargs={'pk': self.house.id, 'id': self.invite.id}, ), follow=True)
        invite_count_post = Invitation.objects.count()
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'account/login.html')
        self.assertContains(response, 'Login')
        self.assertNotContains(response, '404')
        self.assertNotContains(response, self.house)
        self.assertEqual(invite_count_pre, invite_count_post)

    def test_house_invite_decline_view_get_wrong_user(self):
        print('Testing houses.views.house_invite_decline() GET wrong user')
        self.invite = Invitation.objects.create(house=self.house, sender=self.user, target='aaron@xnovax.net')
        self.client.force_login(self.user2)
        invite_count_pre = Invitation.objects.count()
        response = self.client.get(reverse('house_invite_decline', kwargs={'pk': self.house.id, 'id': self.invite.id}, ), follow=True)
        invite_count_post = Invitation.objects.count()
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'main/404.html')
        self.assertNotContains(response, 'Login')
        self.assertContains(response, '404')
        self.assertNotContains(response, self.house)
        self.assertEqual(invite_count_pre, invite_count_post)

    def test_house_invite_decline_view_post(self):
        print('Testing houses.views.house_invite_decline() POST')
        self.invite = Invitation.objects.create(house=self.house, sender=self.user, target='aaron@xnovax.net')
        self.client.force_login(self.user)
        invite_count_pre = Invitation.objects.count()
        response = self.client.post(reverse('house_invite_decline', kwargs={'pk': self.house.id, 'id': self.invite.id}, ), follow=True)
        invite_count_post = Invitation.objects.count()
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'dashboard/main_dashboard.html')
        self.assertNotContains(response, 'Login')
        self.assertNotContains(response, '404')
        self.assertContains(response, self.house)
        self.assertEqual(invite_count_pre - 1, invite_count_post)

    def test_house_invite_decline_view_post_not_logged_in(self):
        print('Testing houses.views.house_invite_decline() POST not logged in')
        self.invite = Invitation.objects.create(house=self.house, sender=self.user, target='aaron@xnovax.net')
        self.client.logout()
        house_member_count_pre = self.house.members.count()
        invite_count_pre = Invitation.objects.count()
        response = self.client.post(reverse('house_invite_decline', kwargs={'pk': self.house.id, 'id': self.invite.id}, ), follow=True)
        house_member_count_post = self.house.members.count()
        invite_count_post = Invitation.objects.count()
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'account/login.html')
        self.assertContains(response, 'Login')
        self.assertNotContains(response, '404')
        self.assertNotContains(response, self.house)
        self.assertEqual(house_member_count_pre, house_member_count_post)
        self.assertEqual(invite_count_pre, invite_count_post)

    def test_house_invite_decline_view_post_wrong_user(self):
        print('Testing houses.views.house_invite_decline() POST wrong user')
        self.invite = Invitation.objects.create(house=self.house, sender=self.user, target='aaron@xnovax.net')
        self.client.force_login(self.user2)
        house_member_count_pre = self.house.members.count()
        invite_count_pre = Invitation.objects.count()
        response = self.client.post(reverse('house_invite_decline', kwargs={'pk': self.house.id, 'id': self.invite.id}, ), follow=True)
        house_member_count_post = self.house.members.count()
        invite_count_post = Invitation.objects.count()
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'main/404.html')
        self.assertNotContains(response, 'Login')
        self.assertContains(response, '404')
        self.assertNotContains(response, self.house)
        self.assertEqual(house_member_count_pre, house_member_count_post)
        self.assertEqual(invite_count_pre, invite_count_post)

    def test_house_member_remove_view_get(self):
        print('Testing houses.views.house_member_remove() GET')
        self.client.force_login(self.user)
        self.house.members.add(self.user2)
        pre_count = self.house.members.count()
        response = self.client.get(reverse('house_member_remove', kwargs={'pk': self.house.id, 'id': self.user2.id}, ), follow=True)
        self.assertEqual(response.status_code, 200)
        post_count = self.house.members.count()
        self.assertEqual(pre_count, post_count)
        self.assertTemplateUsed(response, 'houses/house_detail.html')
        self.assertNotContains(response, 'Login')
        self.assertNotContains(response, '404')
        self.assertContains(response, self.house)

    def test_house_member_remove_view_get_not_logged_in(self):
        print('Testing houses.views.house_member_remove() GET not logged in')
        self.client.logout()
        self.house.members.add(self.user2)
        pre_count = self.house.members.count()
        response = self.client.get(reverse('house_member_remove', kwargs={'pk': self.house.id, 'id': self.user2.id}, ), follow=True)
        self.assertEqual(response.status_code, 200)
        post_count = self.house.members.count()
        self.assertEqual(pre_count, post_count)
        self.assertTemplateUsed(response, 'account/login.html')
        self.assertContains(response, 'Login')
        self.assertNotContains(response, '404')
        self.assertNotContains(response, self.house)

    def test_house_member_remove_view_get_wrong_user(self):
        print('Testing houses.views.house_member_remove() GET wrong user')
        self.client.force_login(self.user2)
        self.house.members.add(self.user2)
        pre_count = self.house.members.count()
        response = self.client.get(reverse('house_member_remove', kwargs={'pk': self.house.id, 'id': self.user2.id}, ), follow=True)
        self.assertEqual(response.status_code, 200)
        post_count = self.house.members.count()
        self.assertEqual(pre_count, post_count)
        self.assertTemplateUsed(response, 'main/404.html')
        self.assertNotContains(response, 'Login')
        self.assertContains(response, '404')
        self.assertNotContains(response, self.house)

    def test_house_member_remove_view_post(self):
        print('Testing houses.views.house_member_remove() POST')
        self.client.force_login(self.user)
        self.house.members.add(self.user2)
        pre_count = self.house.members.count()
        response = self.client.post(reverse('house_member_remove', kwargs={'pk': self.house.id, 'id': self.user2.id}, ), follow=True)
        self.assertEqual(response.status_code, 200)
        post_count = self.house.members.count()
        self.assertEqual(pre_count - 1, post_count)
        self.assertTemplateUsed(response, 'houses/house_detail.html')
        self.assertNotContains(response, 'Login')
        self.assertNotContains(response, '404')
        self.assertContains(response, self.house)

    def test_house_member_remove_view_post_not_logged_in(self):
        print('Testing houses.views.house_member_remove() POST not logged in')
        self.client.logout()
        self.house.members.add(self.user2)
        pre_count = self.house.members.count()
        response = self.client.post(reverse('house_member_remove', kwargs={'pk': self.house.id, 'id': self.user2.id}, ), follow=True)
        self.assertEqual(response.status_code, 200)
        post_count = self.house.members.count()
        self.assertEqual(pre_count, post_count)
        self.assertTemplateUsed(response, 'account/login.html')
        self.assertContains(response, 'Login')
        self.assertNotContains(response, '404')
        self.assertNotContains(response, self.house)

    def test_house_member_remove_view_post_wrong_user(self):
        print('Testing houses.views.house_member_remove() POST wrong user')
        self.client.force_login(self.user2)
        self.house.members.add(self.user2)
        pre_count = self.house.members.count()
        response = self.client.post(reverse('house_member_remove', kwargs={'pk': self.house.id, 'id': self.user2.id}, ), follow=True)
        self.assertEqual(response.status_code, 200)
        post_count = self.house.members.count()
        self.assertEqual(pre_count, post_count)
        self.assertTemplateUsed(response, 'main/404.html')
        self.assertNotContains(response, 'Login')
        self.assertContains(response, '404')
        self.assertNotContains(response, self.house)

    def test_house_add_room_view_get(self):
        print('Testing houses.views.house_add_room() GET')
        self.client.force_login(self.user)
        response = self.client.get(reverse('house_add_room', args=[self.house.id]))
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'houses/room_add.html')
        self.assertContains(response, self.house)
        self.assertContains(response, 'Add Room')
        self.assertNotContains(response, '404')
        self.assertNotContains(response, 'Login')

    def test_house_add_room_view_get_not_logged_in(self):
        print('Testing houses.views.house_add_room() GET not logged in')
        self.client.logout()
        response = self.client.get(reverse('house_add_room', args=[self.house.id]), follow=True)
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'account/login.html')
        self.assertNotContains(response, self.house)
        self.assertNotContains(response, 'Add Room')
        self.assertNotContains(response, '404')
        self.assertContains(response, 'Login')

    def test_house_add_room_view_get_wrong_user(self):
        print('Testing houses.views.house_add_room() GET wrong user')
        self.client.force_login(self.user2)
        response = self.client.get(reverse('house_add_room', args=[self.house.id]), follow=True)
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'main/404.html')
        self.assertNotContains(response, self.house)
        self.assertNotContains(response, 'Add Room')
        self.assertContains(response, '404')
        self.assertNotContains(response, 'Login')

    def test_house_add_room_view_post(self):
        print('Testing houses.views.house_add_room() POST')
        self.client.force_login(self.user)
        count_pre = Room.objects.count()
        req_data = {'name': 'Master Bedroom', 'price': '799.00', 'description': 'Looking for a lovely student roommate'}
        response = self.client.post(reverse('house_add_room', args=[self.house.id]), req_data, follow=True)
        count_post = Room.objects.count()
        self.assertEqual(count_pre + 1, count_post)
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'rooms/room_detail.html')
        self.assertContains(response, 'Master Bedroom')
        self.assertContains(response, '$799.00')
        self.assertNotContains(response, 'Add Room')
        self.assertNotContains(response, '404')
        self.assertNotContains(response, 'Login')

    def test_house_add_room_view_post_no_name(self):
        print('Testing houses.views.house_add_room() POST no name')
        self.client.force_login(self.user)
        count_pre = Room.objects.count()
        req_data = {'price': '799.00', 'description': 'Looking for a lovely student roommate'}
        response = self.client.post(reverse('house_add_room', args=[self.house.id]), req_data, follow=True)
        count_post = Room.objects.count()
        self.assertEqual(count_pre, count_post)
        self.assertContains(response, 'Add Room')
        self.assertContains(response, 'Please make sure to fill in all required details')
        self.assertNotContains(response, '404')
        self.assertNotContains(response, 'Login')
        self.assertTemplateUsed(response, 'houses/room_add.html')

    def test_house_add_room_view_post_no_price(self):
        print('Testing houses.views.house_add_room() POST no price')
        self.client.force_login(self.user)
        count_pre = Room.objects.count()
        req_data = {'name': 'Master Bedroom', 'description': 'Looking for a lovely student roommate'}
        response = self.client.post(reverse('house_add_room', args=[self.house.id]), req_data, follow=True)
        count_post = Room.objects.count()
        self.assertEqual(count_pre, count_post)
        self.assertContains(response, 'Add Room')
        self.assertContains(response, 'Please make sure to fill in all required details')
        self.assertNotContains(response, '404')
        self.assertNotContains(response, 'Login')
        self.assertTemplateUsed(response, 'houses/room_add.html')

    def test_house_add_room_view_post_no_description(self):
        print('Testing houses.views.house_add_room() POST no description')
        self.client.force_login(self.user)
        count_pre = Room.objects.count()
        req_data = {'name': 'Master Bedroom', 'price': '799.99'}
        response = self.client.post(reverse('house_add_room', args=[self.house.id]), req_data, follow=True)
        count_post = Room.objects.count()
        self.assertEqual(count_pre, count_post)
        self.assertContains(response, 'Add Room')
        self.assertContains(response, 'Please make sure to fill in all required details')
        self.assertNotContains(response, '404')
        self.assertNotContains(response, 'Login')
        self.assertTemplateUsed(response, 'houses/room_add.html')

    def test_house_add_room_view_post_not_logged_in(self):
        print('Testing houses.views.house_add_room() POST not logged in')
        self.client.logout()
        count_pre = Room.objects.count()
        req_data = {'name': 'Master Bedroom', 'price': '799.00', 'description': 'Looking for a lovely student roommate'}
        response = self.client.post(reverse('house_add_room', args=[self.house.id]), req_data, follow=True)
        count_post = Room.objects.count()
        self.assertEqual(count_pre, count_post)
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'account/login.html')
        self.assertNotContains(response, 'Master Bedroom')
        self.assertNotContains(response, '$799.00')
        self.assertNotContains(response, 'Add Room')
        self.assertNotContains(response, '404')
        self.assertContains(response, 'Login')

    def test_house_add_room_view_post_wrong_user(self):
        print('Testing houses.views.house_add_room() POST wrong user')
        self.client.force_login(self.user2)
        count_pre = Room.objects.count()
        req_data = {'name': 'Master Bedroom', 'price': '799.00', 'description': 'Looking for a lovely student roommate'}
        response = self.client.post(reverse('house_add_room', args=[self.house.id]), req_data, follow=True)
        count_post = Room.objects.count()
        self.assertEqual(count_pre, count_post)
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'main/404.html')
        self.assertNotContains(response, 'Master Bedroom')
        self.assertNotContains(response, '$799.00')
        self.assertNotContains(response, 'Add Room')
        self.assertContains(response, '404')
        self.assertNotContains(response, 'Login')

    def test_house_detail_view_get_not_a_member(self):
        print('Testing houses.views.house_details() GET not a member')
        self.client.force_login(self.user2)
        response = self.client.get(reverse('house_detail', args=[self.house.id]))
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'houses/house_detail.html')
        self.assertContains(response, self.house)
        self.assertNotContains(response, 'Bills')
        self.assertNotContains(response, 'Garbage Day')
        self.assertNotContains(response, 'Members')

    def test_house_detail_view_get_valid(self):
        print('Testing houses.views.house_details() GET')
        self.client.login(username='Fred_Flintstone', password='foo')
        response = self.client.get(reverse('house_detail', args=[self.house.id]))
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'houses/house_detail.html')
        self.assertContains(response, self.house)

    def test_house_detail_view_get_valid1(self):
        print('Testing houses.views.house_details() GET 1')
        self.client.login(username='Fred_Flintstone', password='foo')
        response = self.client.get(self.house.get_absolute_url())
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'houses/house_detail.html')
        self.assertContains(response, self.house)

    def test_house_detail_view_get_invalidpk(self):
        print('Testing houses.views.house_details() GET INVALID PK')
        self.client.login(username='Fred_Flintstone', password='foo')
        response = self.client.get(reverse('house_detail', args=[-1]))
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'main/404.html')
        self.assertNotContains(response, 'Details')
        self.assertContains(response, '404')

    def test_house_edit_view_get(self):
        print('Testing houses.views.house_edit() GET')
        self.client.force_login(self.user)
        response = self.client.get(reverse('house_edit', args=[self.house.id]))
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'houses/house_edit.html')
        self.assertContains(response, self.house)
        self.assertContains(response, 'Editing')
        self.assertNotContains(response, '404')
        self.assertNotContains(response, 'Login')

    def test_house_edit_view_get_not_logged_in(self):
        print('Testing houses.views.house_edit() GET not logged in')
        self.client.logout()
        response = self.client.get(reverse('house_edit', args=[self.house.id]), follow=True)
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'Login')
        self.assertTemplateUsed(response, 'account/login.html')

    def test_house_edit_view_get_wrong_user(self):
        print('Testing houses.views.house_edit() GET wrong user')
        self.client.force_login(self.user2)
        response = self.client.get(reverse('house_edit', args=[self.house.id]), follow=True)
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '404')
        self.assertTemplateUsed(response, 'main/404.html')

    def test_house_edit_view_post(self):
        print('Testing houses.views.house_edit() POST')
        # Test before values
        self.assertFalse(self.house.hide_address)
        self.assertEqual(self.house.num_rooms, 0)
        self.assertEqual(self.house.num_bathrooms, 0)
        self.assertEqual(self.house.num_parking_spaces, 0)
        self.assertFalse(self.house.has_dishwasher)
        self.assertFalse(self.house.has_laundry)
        self.assertFalse(self.house.has_air_conditioning)

        req_data = {'hide_address': True, 'num_rooms': 4, 'num_bathrooms': 4, 'num_parking_spaces': 4, 'has_dishwasher': True, 'has_laundry': True,
                    'has_air_conditioning': True}
        self.client.force_login(self.user)
        response = self.client.post(reverse('house_edit', args=[self.house.id]), req_data, follow=True)
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'houses/house_detail.html')

        # Test post values
        self.house = House.objects.get(pk=self.house.id)
        self.assertTrue(self.house.hide_address)
        self.assertEqual(self.house.num_rooms, 4)
        self.assertEqual(self.house.num_bathrooms, 4)
        self.assertEqual(self.house.num_parking_spaces, 4)
        self.assertTrue(self.house.has_dishwasher)
        self.assertTrue(self.house.has_laundry)
        self.assertTrue(self.house.has_air_conditioning)

    def test_house_edit_view_post_not_logged_in(self):
        print('Testing houses.views.house_edit() POST not logged in')
        # Test before values
        self.assertFalse(self.house.hide_address)
        self.assertEqual(self.house.num_rooms, 0)
        self.assertEqual(self.house.num_bathrooms, 0)
        self.assertEqual(self.house.num_parking_spaces, 0)
        self.assertFalse(self.house.has_dishwasher)
        self.assertFalse(self.house.has_laundry)
        self.assertFalse(self.house.has_air_conditioning)

        req_data = {'hide_address': True, 'num_rooms': 4, 'num_bathrooms': 4, 'num_parking_spaces': 4, 'has_dishwasher': True, 'has_laundry': True,
                    'has_air_conditioning': True}
        self.client.logout()
        response = self.client.post(reverse('house_edit', args=[self.house.id]), req_data, follow=True)
        self.assertEqual(response.status_code, 200)
        self.assertNotContains(response, '404')
        self.assertContains(response, 'Login')
        self.assertNotContains(response, self.house)
        self.assertTemplateUsed(response, 'account/login.html')
        self.house = House.objects.get(pk=self.house.pk)

        # Test after values
        self.assertFalse(self.house.hide_address)
        self.assertEqual(self.house.num_rooms, 0)
        self.assertEqual(self.house.num_bathrooms, 0)
        self.assertEqual(self.house.num_parking_spaces, 0)
        self.assertFalse(self.house.has_dishwasher)
        self.assertFalse(self.house.has_laundry)
        self.assertFalse(self.house.has_air_conditioning)

    def test_house_edit_view_post_wrong_user(self):
        print('Testing houses.views.house_edit() POST wrong user')
        # Test before values
        self.assertFalse(self.house.hide_address)
        self.assertEqual(self.house.num_rooms, 0)
        self.assertEqual(self.house.num_bathrooms, 0)
        self.assertEqual(self.house.num_parking_spaces, 0)
        self.assertFalse(self.house.has_dishwasher)
        self.assertFalse(self.house.has_laundry)
        self.assertFalse(self.house.has_air_conditioning)

        req_data = {'hide_address': True, 'num_rooms': 4, 'num_bathrooms': 4, 'num_parking_spaces': 4, 'has_dishwasher': True, 'has_laundry': True,
                    'has_air_conditioning': True}
        self.client.force_login(self.user2)
        response = self.client.post(reverse('house_edit', args=[self.house.id]), req_data, follow=True)
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '404')
        self.assertTemplateUsed(response, 'main/404.html')
        self.house = House.objects.get(pk=self.house.pk)

        # Test after values
        self.assertFalse(self.house.hide_address)
        self.assertEqual(self.house.num_rooms, 0)
        self.assertEqual(self.house.num_bathrooms, 0)
        self.assertEqual(self.house.num_parking_spaces, 0)
        self.assertFalse(self.house.has_dishwasher)
        self.assertFalse(self.house.has_laundry)
        self.assertFalse(self.house.has_air_conditioning)

    def test_house_delete_view_get(self):
        print('Testing houses.views.house_delete() GET')
        self.client.force_login(self.user)
        response = self.client.get(reverse('house_delete', args=[self.house.id]))
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'houses/house_delete.html')
        self.assertContains(response, self.house)
        self.assertContains(response, 'Delete')
        self.assertNotContains(response, '404')
        self.assertNotContains(response, 'Login')

    def test_house_delete_view_get_not_logged_in(self):
        print('Testing houses.views.house_delete() GET not logged in')
        self.client.logout()
        response = self.client.get(reverse('house_delete', args=[self.house.id]), follow=True)
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'Login')
        self.assertTemplateUsed(response, 'account/login.html')

    def test_house_delete_view_get_wrong_user(self):
        print('Testing houses.views.house_delete() GET wrong user')
        self.client.force_login(self.user2)
        response = self.client.get(reverse('house_delete', args=[self.house.id]), follow=True)
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '404')
        self.assertTemplateUsed(response, 'main/404.html')

    def test_house_delete_view_post(self):
        print('Testing houses.views.house_delete() POST')
        count_pre = House.objects.count()
        req_data = {}
        self.client.force_login(self.user)
        response = self.client.post(reverse('house_delete', args=[self.house.id]), req_data, follow=True)
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'dashboard/main_dashboard.html')
        count_post = House.objects.count()
        self.assertEqual(count_pre - 1, count_post)

    def test_house_delete_view_post_wrong_user(self):
        print('Testing houses.views.house_delete() POST wrong user')
        count_pre = House.objects.count()
        req_data = {}
        self.client.force_login(self.user2)
        response = self.client.post(reverse('house_delete', args=[self.house.id]), req_data, follow=True)
        count_post = House.objects.count()
        self.assertEqual(count_pre, count_post)
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, '404')
        self.assertTemplateUsed(response, 'main/404.html')

    def test_house_delete_view_post_not_logged_in(self):
        print('Testing houses.views.house_delete() POST not logged in')
        count_pre = House.objects.count()
        req_data = {}
        self.client.logout()
        response = self.client.post(reverse('house_delete', args=[self.house.id]), req_data, follow=True)
        count_post = House.objects.count()
        self.assertEqual(count_pre, count_post)
        self.assertEqual(response.status_code, 200)
        self.assertNotContains(response, '404')
        self.assertNotContains(response, 'DELETE')
        self.assertContains(response, 'Login')
        self.assertTemplateUsed(response, 'account/login.html')
